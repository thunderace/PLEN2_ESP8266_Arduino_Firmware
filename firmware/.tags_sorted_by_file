dump	AccelerationGyroSensor.cpp	/^void PLEN2::AccelerationGyroSensor::dump()$/;"	f	class:PLEN2::AccelerationGyroSensor
endian_cast	AccelerationGyroSensor.cpp	/^	void endian_cast(T& value)$/;"	f	namespace:__anon1
endian_cast	AccelerationGyroSensor.cpp	/^	void endian_cast(int& value)$/;"	f	namespace:__anon1
getAccX	AccelerationGyroSensor.cpp	/^const int& PLEN2::AccelerationGyroSensor::getAccX()$/;"	f	class:PLEN2::AccelerationGyroSensor
getAccY	AccelerationGyroSensor.cpp	/^const int& PLEN2::AccelerationGyroSensor::getAccY()$/;"	f	class:PLEN2::AccelerationGyroSensor
getAccZ	AccelerationGyroSensor.cpp	/^const int& PLEN2::AccelerationGyroSensor::getAccZ()$/;"	f	class:PLEN2::AccelerationGyroSensor
getGyroPitch	AccelerationGyroSensor.cpp	/^const int& PLEN2::AccelerationGyroSensor::getGyroPitch()$/;"	f	class:PLEN2::AccelerationGyroSensor
getGyroRoll	AccelerationGyroSensor.cpp	/^const int& PLEN2::AccelerationGyroSensor::getGyroRoll()$/;"	f	class:PLEN2::AccelerationGyroSensor
getGyroYaw	AccelerationGyroSensor.cpp	/^const int& PLEN2::AccelerationGyroSensor::getGyroYaw()$/;"	f	class:PLEN2::AccelerationGyroSensor
sampling	AccelerationGyroSensor.cpp	/^void PLEN2::AccelerationGyroSensor::sampling()$/;"	f	class:PLEN2::AccelerationGyroSensor
ACC_X	AccelerationGyroSensor.h	/^		ACC_X,$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
ACC_Y	AccelerationGyroSensor.h	/^		ACC_Y,$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
ACC_Z	AccelerationGyroSensor.h	/^		ACC_Z,$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
AccelerationGyroSensor	AccelerationGyroSensor.h	/^class PLEN2::AccelerationGyroSensor$/;"	c	class:PLEN2
GYRO_PITCH	AccelerationGyroSensor.h	/^		GYRO_PITCH,$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
GYRO_ROLL	AccelerationGyroSensor.h	/^		GYRO_ROLL,$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
GYRO_YAW	AccelerationGyroSensor.h	/^		GYRO_YAW,$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
PLEN2	AccelerationGyroSensor.h	/^namespace PLEN2$/;"	n
PLEN2_ACCELERATION_GYRO_SENSOR_H	AccelerationGyroSensor.h	11;"	d
SENSOR_VALUE_MAP	AccelerationGyroSensor.h	/^	enum SENSOR_VALUE_MAP {$/;"	g	class:PLEN2::AccelerationGyroSensor
SUM	AccelerationGyroSensor.h	/^		SUM \/\/!< Summation of sensors$/;"	e	enum:PLEN2::AccelerationGyroSensor::SENSOR_VALUE_MAP
m_values	AccelerationGyroSensor.h	/^	int m_values[SUM];$/;"	m	class:PLEN2::AccelerationGyroSensor
de_init	ExternalFS.cpp	/^void PLEN2::ExternalFs::de_init()$/;"	f	class:PLEN2::ExternalFs
fp_config	ExternalFS.cpp	/^File fp_config;$/;"	v
fp_motion	ExternalFS.cpp	/^File fp_motion;$/;"	v
fp_syscfg	ExternalFS.cpp	/^File fp_syscfg;$/;"	v
init	ExternalFS.cpp	/^void PLEN2::ExternalFs::init()$/;"	f	class:PLEN2::ExternalFs
read	ExternalFS.cpp	/^char PLEN2::ExternalFs::read($/;"	f	class:PLEN2::ExternalFs
readByte	ExternalFS.cpp	/^unsigned char PLEN2::ExternalFs::readByte($/;"	f	class:PLEN2::ExternalFs
readSlot	ExternalFS.cpp	/^char PLEN2::ExternalFs::readSlot($/;"	f	class:PLEN2::ExternalFs
write	ExternalFS.cpp	/^char PLEN2::ExternalFs::write($/;"	f	class:PLEN2::ExternalFs
writeByte	ExternalFS.cpp	/^char PLEN2::ExternalFs::writeByte($/;"	f	class:PLEN2::ExternalFs
writeSlot	ExternalFS.cpp	/^char PLEN2::ExternalFs::writeSlot($/;"	f	class:PLEN2::ExternalFs
BUF_SIZE	ExternalFs.h	24;"	d
CHUNK_SIZE	ExternalFs.h	/^	inline static const int CHUNK_SIZE() { return 32; }$/;"	f	class:PLEN2::ExternalFs
CONFIG_FILE	ExternalFs.h	18;"	d
CONFIG_FILE_SIZE	ExternalFs.h	19;"	d
ExternalFs	ExternalFs.h	/^class PLEN2::ExternalFs$/;"	c	class:PLEN2
MOTION_FILE	ExternalFs.h	15;"	d
MOTION_FILE_SIZE	ExternalFs.h	16;"	d
PLEN2	ExternalFs.h	/^namespace PLEN2$/;"	n
PLEN2_EXTERNAL_FS_H	ExternalFs.h	11;"	d
SIZE	ExternalFs.h	/^	inline static const long SIZE()          { return MOTION_FILE_SIZE; }$/;"	f	class:PLEN2::ExternalFs
SLOT_BEGIN	ExternalFs.h	/^	inline static const int SLOT_BEGIN() { return 0; }$/;"	f	class:PLEN2::ExternalFs
SLOT_END	ExternalFs.h	/^	inline static const int SLOT_END()   { return SIZE() \/ CHUNK_SIZE(); }$/;"	f	class:PLEN2::ExternalFs
SLOT_SIZE	ExternalFs.h	/^	inline static const int SLOT_SIZE()  { return 30; }$/;"	f	class:PLEN2::ExternalFs
SYSCFG_FILE	ExternalFs.h	21;"	d
SYSCFG_FILE_SIZE	ExternalFs.h	22;"	d
Interpreter	Interpreter.cpp	/^PLEN2::Interpreter::Interpreter(MotionController& motion_crtl)$/;"	f	class:PLEN2::Interpreter
getIndex	Interpreter.cpp	/^	inline unsigned char getIndex(unsigned char value)$/;"	f	namespace:__anon2
popCode	Interpreter.cpp	/^bool PLEN2::Interpreter::popCode()$/;"	f	class:PLEN2::Interpreter
pushCode	Interpreter.cpp	/^bool PLEN2::Interpreter::pushCode(const Code& code)$/;"	f	class:PLEN2::Interpreter
ready	Interpreter.cpp	/^bool PLEN2::Interpreter::ready()$/;"	f	class:PLEN2::Interpreter
reset	Interpreter.cpp	/^void PLEN2::Interpreter::reset()$/;"	f	class:PLEN2::Interpreter
Code	Interpreter.h	/^	class Code$/;"	c	class:PLEN2::Interpreter
Interpreter	Interpreter.h	/^class PLEN2::Interpreter$/;"	c	class:PLEN2
PLEN2	Interpreter.h	/^namespace PLEN2$/;"	n
PLEN2_INTERPRETER_H	Interpreter.h	11;"	d
QUEUE_SIZE	Interpreter.h	/^		QUEUE_SIZE = 32$/;"	e	enum:PLEN2::Interpreter::__anon3
loop_count	Interpreter.h	/^		unsigned char loop_count; \/\/!< Loop count. (Using 255 as infinity.)$/;"	m	class:PLEN2::Interpreter::Code
m_code_queue	Interpreter.h	/^	Code m_code_queue[QUEUE_SIZE];$/;"	m	class:PLEN2::Interpreter
m_motion_ctrl_ptr	Interpreter.h	/^	MotionController* m_motion_ctrl_ptr;$/;"	m	class:PLEN2::Interpreter
m_queue_begin	Interpreter.h	/^	unsigned char m_queue_begin;$/;"	m	class:PLEN2::Interpreter
m_queue_end	Interpreter.h	/^	unsigned char m_queue_end;$/;"	m	class:PLEN2::Interpreter
slot	Interpreter.h	/^		unsigned char slot;       \/\/!< Slot number of a motion.$/;"	m	class:PLEN2::Interpreter::Code
ERROR_LVALUE	JointController.cpp	/^		const int ERROR_LVALUE = -32768;$/;"	m	namespace:__anon4::Shared	file:
EyeOut	JointController.cpp	/^Servo EyeOut;$/;"	v
GPIO12SERVO	JointController.cpp	/^Servo GPIO12SERVO;$/;"	v
GPIO14SERVO	JointController.cpp	/^Servo GPIO14SERVO;$/;"	v
Init	JointController.cpp	/^void PLEN2::JointController::Init()$/;"	f	class:PLEN2::JointController
JointController	JointController.cpp	/^PLEN2::JointController::JointController()$/;"	f	class:PLEN2::JointController
PLEN2_JOINTCONTROLLER_PWM_OUT_00_07_REGISTER	JointController.cpp	34;"	d	file:
PLEN2_JOINTCONTROLLER_PWM_OUT_08_15_REGISTER	JointController.cpp	35;"	d	file:
PLEN2_JOINTCONTROLLER_PWM_OUT_16_23_REGISTER	JointController.cpp	36;"	d	file:
Shared	JointController.cpp	/^	namespace Shared$/;"	n	namespace:__anon4	file:
_enable	JointController.cpp	/^int _enable;$/;"	v
_eye_count	JointController.cpp	/^int _eye_count;$/;"	v
_eye_count_step	JointController.cpp	/^int _eye_count_step;$/;"	v
dump	JointController.cpp	/^void PLEN2::JointController::dump()$/;"	f	class:PLEN2::JointController
flipper	JointController.cpp	/^Ticker flipper;$/;"	v
flipper_second	JointController.cpp	/^Ticker flipper_second;$/;"	v
getHomeAngle	JointController.cpp	/^const int& PLEN2::JointController::getHomeAngle(unsigned char joint_id)$/;"	f	class:PLEN2::JointController
getMaxAngle	JointController.cpp	/^const int& PLEN2::JointController::getMaxAngle(unsigned char joint_id)$/;"	f	class:PLEN2::JointController
getMinAngle	JointController.cpp	/^const int& PLEN2::JointController::getMinAngle(unsigned char joint_id)$/;"	f	class:PLEN2::JointController
loadSettings	JointController.cpp	/^void PLEN2::JointController::loadSettings()$/;"	f	class:PLEN2::JointController
m_1cycle_finished	JointController.cpp	/^volatile bool PLEN2::JointController::m_1cycle_finished = false;$/;"	m	class:PLEN2::JointController	file:
m_SETTINGS_INITIAL	JointController.cpp	/^		PROGMEM const int m_SETTINGS_INITIAL[] =$/;"	m	namespace:__anon4::Shared	file:
m_pwms	JointController.cpp	/^int PLEN2::JointController::m_pwms[PLEN2::JointController::SUM];$/;"	m	class:PLEN2::JointController	file:
pwm	JointController.cpp	/^Adafruit_PWMServoDriver pwm;$/;"	v
resetSettings	JointController.cpp	/^void PLEN2::JointController::resetSettings()$/;"	f	class:PLEN2::JointController
servo_map	JointController.cpp	/^const unsigned char servo_map[PLEN2::JointController::SUM] = {16, 7, 6, 5, 4, 3, 2, 1, 0, 18, 19, 20, 17, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23};$/;"	v
setAngle	JointController.cpp	/^bool PLEN2::JointController::setAngle(unsigned char joint_id, int angle)$/;"	f	class:PLEN2::JointController
setAngleDiff	JointController.cpp	/^bool PLEN2::JointController::setAngleDiff(unsigned char joint_id, int angle_diff)$/;"	f	class:PLEN2::JointController
setHomeAngle	JointController.cpp	/^bool PLEN2::JointController::setHomeAngle(unsigned char joint_id, int angle)$/;"	f	class:PLEN2::JointController
setMaxAngle	JointController.cpp	/^bool PLEN2::JointController::setMaxAngle(unsigned char joint_id, int angle)$/;"	f	class:PLEN2::JointController
setMinAngle	JointController.cpp	/^bool PLEN2::JointController::setMinAngle(unsigned char joint_id, int angle)$/;"	f	class:PLEN2::JointController
updateAngle	JointController.cpp	/^void PLEN2::JointController::updateAngle()$/;"	f	class:PLEN2::JointController
updateEyes	JointController.cpp	/^void PLEN2::JointController::updateEyes()$/;"	f	class:PLEN2::JointController
ANGLE_MAX	JointController.h	/^		ANGLE_MAX     =  800, \/\/!< Max angle of the servos.$/;"	e	enum:PLEN2::JointController::__anon5
ANGLE_MIN	JointController.h	/^		ANGLE_MIN     = -800, \/\/!< Min angle of the servos.$/;"	e	enum:PLEN2::JointController::__anon5
ANGLE_NEUTRAL	JointController.h	/^		ANGLE_NEUTRAL =    0  \/\/!< Neutral angle of the servos.$/;"	e	enum:PLEN2::JointController::__anon5
HOME	JointController.h	/^		int HOME; \/\/!< Setting about home angle.$/;"	m	class:PLEN2::JointController::JointSetting
INIT_FLAG_ADDRESS	JointController.h	/^	inline static const int INIT_FLAG_ADDRESS()     { return 0; }$/;"	f	class:PLEN2::JointController
INIT_FLAG_VALUE	JointController.h	/^	inline static const unsigned char INIT_FLAG_VALUE()       { return 2; }$/;"	f	class:PLEN2::JointController
JointController	JointController.h	/^class PLEN2::JointController$/;"	c	class:PLEN2
JointSetting	JointController.h	/^		JointSetting()$/;"	f	class:PLEN2::JointController::JointSetting
JointSetting	JointController.h	/^	class JointSetting$/;"	c	class:PLEN2::JointController
MAX	JointController.h	/^		int MAX;  \/\/!< Setting about max angle.$/;"	m	class:PLEN2::JointController::JointSetting
MIN	JointController.h	/^		int MIN;  \/\/!< Setting about min angle.$/;"	m	class:PLEN2::JointController::JointSetting
Multiplexer	JointController.h	/^	class Multiplexer {$/;"	c	class:PLEN2::JointController
PLEN2	JointController.h	/^namespace PLEN2$/;"	n
PLEN2_JOINT_CONTROLLER_H	JointController.h	9;"	d
PWM_FREQ	JointController.h	/^    inline static const int PWM_FREQ()    { return 320;  }$/;"	f	class:PLEN2::JointController
PWM_FREQ	JointController.h	/^    inline static const int PWM_FREQ()    { return 60;  }$/;"	f	class:PLEN2::JointController
PWM_MAX	JointController.h	/^	inline static const int PWM_MAX()     { return 2700;  }$/;"	f	class:PLEN2::JointController
PWM_MAX	JointController.h	/^	inline static const int PWM_MAX()     { return 575;  }$/;"	f	class:PLEN2::JointController
PWM_MIN	JointController.h	/^	inline static const int PWM_MIN()     { return 1100;  }$/;"	f	class:PLEN2::JointController
PWM_MIN	JointController.h	/^	inline static const int PWM_MIN()     { return 175;  }$/;"	f	class:PLEN2::JointController
PWM_NEUTRAL	JointController.h	/^	inline static const int PWM_NEUTRAL() { return 1900;  }$/;"	f	class:PLEN2::JointController
PWM_NEUTRAL	JointController.h	/^	inline static const int PWM_NEUTRAL() { return 375;  }$/;"	f	class:PLEN2::JointController
SELECTABLE_LINES	JointController.h	/^		inline static const int SELECTABLE_LINES() { return 8; }$/;"	f	class:PLEN2::JointController::Multiplexer
SETTINGS_HEAD_ADDRESS	JointController.h	/^	inline static const int SETTINGS_HEAD_ADDRESS() { return 1; }$/;"	f	class:PLEN2::JointController
SUM	JointController.h	/^		SUM = 24, \/\/!< Summation of the servos controllable.$/;"	e	enum:PLEN2::JointController::__anon5
SUM	JointController.h	/^		inline static const int SUM()              { return 3; }$/;"	f	class:PLEN2::JointController::Multiplexer
USE_DIGTAL_SERVO	JointController.h	11;"	d
m_1cycle_finished	JointController.h	/^	volatile static bool m_1cycle_finished;$/;"	m	class:PLEN2::JointController
m_SETTINGS	JointController.h	/^	JointSetting m_SETTINGS[SUM];$/;"	m	class:PLEN2::JointController
m_pwms	JointController.h	/^	static int m_pwms[SUM];$/;"	m	class:PLEN2::JointController
IF	Motion.cpp	/^	struct IF$/;"	s	namespace:__anon6	file:
IF	Motion.cpp	/^	struct IF<0>$/;"	s	namespace:__anon6	file:
Motion	Motion.cpp	/^namespace Motion$/;"	n	namespace:PLEN2	file:
PLEN2	Motion.cpp	/^namespace PLEN2$/;"	n	file:
SIZE_SUP	Motion.cpp	/^	struct SIZE_SUP$/;"	s	namespace:__anon6	file:
SLOT_COUNT	Motion.cpp	/^	struct SLOT_COUNT$/;"	s	namespace:__anon6	file:
SLOT_COUNT_FRAME	Motion.cpp	/^		SLOT_COUNT_FRAME  = SLOT_COUNT<Frame >::VALUE,$/;"	e	enum:__anon6::__anon11	file:
SLOT_COUNT_HEADER	Motion.cpp	/^		SLOT_COUNT_HEADER = SLOT_COUNT<Header>::VALUE,$/;"	e	enum:__anon6::__anon11	file:
SLOT_COUNT_MOTION	Motion.cpp	/^		SLOT_COUNT_MOTION = SLOT_COUNT_HEADER + SLOT_COUNT_FRAME * Header::FRAMELENGTH_MAX$/;"	e	enum:__anon6::__anon11	file:
VALUE	Motion.cpp	/^			VALUE = sizeof(T) \/ 32 \/* ExternalFs::SLOT_SIZE *\/$/;"	e	enum:__anon6::SLOT_COUNT::__anon10	file:
VALUE	Motion.cpp	/^		enum { VALUE = 0 };$/;"	e	enum:__anon6::IF::__anon8	file:
VALUE	Motion.cpp	/^		enum { VALUE = 1 };$/;"	e	enum:__anon6::IF::__anon7	file:
VALUE	Motion.cpp	/^		enum { VALUE = sizeof(T) % 32 \/* ExternalFs:SLOT_SIZE *\/ };$/;"	e	enum:__anon6::SIZE_SUP::__anon9	file:
get	Motion.cpp	/^bool Frame::get(unsigned char slot)$/;"	f	class:PLEN2::Motion::Frame
get	Motion.cpp	/^bool Header::get()$/;"	f	class:PLEN2::Motion::Header
init	Motion.cpp	/^void Header::init()$/;"	f	class:PLEN2::Motion::Header
set	Motion.cpp	/^bool Frame::set(unsigned char slot)$/;"	f	class:PLEN2::Motion::Frame
set	Motion.cpp	/^bool Header::set()$/;"	f	class:PLEN2::Motion::Header
FRAMELENGTH_MAX	Motion.h	/^		FRAMELENGTH_MAX = 20  \/\/!< Maximum value of frame length.$/;"	e	enum:PLEN2::Motion::Header::__anon13
FRAMELENGTH_MIN	Motion.h	/^		FRAMELENGTH_MIN =  1, \/\/!< Minimum value of frame length. $/;"	e	enum:PLEN2::Motion::Header::__anon13
FRAME_BEGIN	Motion.h	/^		FRAME_BEGIN =  0, \/\/!< Beginning value of frames.$/;"	e	enum:PLEN2::Motion::Frame::__anon14
FRAME_END	Motion.h	/^		FRAME_END   = 20  \/\/!< Ending value of frames.$/;"	e	enum:PLEN2::Motion::Frame::__anon14
Frame	Motion.h	/^class PLEN2::Motion::Frame$/;"	c	class:PLEN2::Motion
Header	Motion.h	/^class PLEN2::Motion::Header$/;"	c	class:PLEN2::Motion
Motion	Motion.h	/^	namespace Motion$/;"	n	namespace:PLEN2
NAME_LENGTH	Motion.h	/^		NAME_LENGTH     = 21,$/;"	e	enum:PLEN2::Motion::Header::__anon13
PLEN2	Motion.h	/^namespace PLEN2$/;"	n
PLEN2_MOTION_H	Motion.h	11;"	d
SLOT_BEGIN	Motion.h	/^			SLOT_BEGIN =  0, \/\/!< Beginning value of slots.$/;"	e	enum:PLEN2::Motion::__anon12
SLOT_END	Motion.h	/^			SLOT_END   = 90  \/\/!< Ending value of slots.$/;"	e	enum:PLEN2::Motion::__anon12
UPDATE_INTERVAL_MS	Motion.h	/^        UPDATE_INTERVAL_MS = 32,$/;"	e	enum:PLEN2::Motion::Frame::__anon14
device_value	Motion.h	/^	unsigned char device_value[8];                   \/\/!< Output values.$/;"	m	class:PLEN2::Motion::Frame
frame_length	Motion.h	/^	unsigned char frame_length;      \/\/!< Frame length of a motion.$/;"	m	class:PLEN2::Motion::Header
index	Motion.h	/^	unsigned char index;                             \/\/!< Index of a frame.$/;"	m	class:PLEN2::Motion::Frame
joint_angle	Motion.h	/^	int           joint_angle[JointController::SUM]; \/\/!< Angles.$/;"	m	class:PLEN2::Motion::Frame
jump_slot	Motion.h	/^	unsigned char jump_slot;         \/\/!< Slot number that is used for jumpping when play the motion finished.$/;"	m	class:PLEN2::Motion::Header
loop_begin	Motion.h	/^	unsigned char loop_begin;        \/\/!< Frame number of loop's beginning.$/;"	m	class:PLEN2::Motion::Header
loop_count	Motion.h	/^	unsigned char loop_count;        \/\/!< Loop count. (Using 255 as infinity.)$/;"	m	class:PLEN2::Motion::Header
loop_end	Motion.h	/^	unsigned char loop_end;          \/\/!< Frame number of loop's ending.$/;"	m	class:PLEN2::Motion::Header
name	Motion.h	/^	char          name[NAME_LENGTH]; \/\/!< Motion name.$/;"	m	class:PLEN2::Motion::Header
slot	Motion.h	/^	unsigned char slot;              \/\/!< Slot number of a motion.$/;"	m	class:PLEN2::Motion::Header
stop_flags	Motion.h	/^	unsigned char stop_flags[2];$/;"	m	class:PLEN2::Motion::Header
transition_time_ms	Motion.h	/^	unsigned int  transition_time_ms;                \/\/!< Time of transit to the frame.$/;"	m	class:PLEN2::Motion::Frame
MotionController	MotionController.cpp	/^PLEN2::MotionController::MotionController(JointController& joint_ctrl)$/;"	f	class:PLEN2::MotionController
PRECISION	MotionController.cpp	/^	enum { PRECISION = 16 };$/;"	e	enum:__anon15::__anon16	file:
dump	MotionController.cpp	/^void PLEN2::MotionController::dump(unsigned char slot)$/;"	f	class:PLEN2::MotionController
fixed_cast	MotionController.cpp	/^	inline const long fixed_cast(const int value)$/;"	f	namespace:__anon15
frameUpdatable	MotionController.cpp	/^bool PLEN2::MotionController::frameUpdatable()$/;"	f	class:PLEN2::MotionController
loadNextFrame	MotionController.cpp	/^void PLEN2::MotionController::loadNextFrame()$/;"	f	class:PLEN2::MotionController
m_bufferingFrame	MotionController.cpp	/^void PLEN2::MotionController::m_bufferingFrame()$/;"	f	class:PLEN2::MotionController
m_setupFrame	MotionController.cpp	/^void PLEN2::MotionController::m_setupFrame(unsigned char index)$/;"	f	class:PLEN2::MotionController
nextFrameLoadable	MotionController.cpp	/^bool PLEN2::MotionController::nextFrameLoadable()$/;"	f	class:PLEN2::MotionController
play	MotionController.cpp	/^void PLEN2::MotionController::play(unsigned char slot)$/;"	f	class:PLEN2::MotionController
playing	MotionController.cpp	/^bool PLEN2::MotionController::playing()$/;"	f	class:PLEN2::MotionController
stop	MotionController.cpp	/^void PLEN2::MotionController::stop()$/;"	f	class:PLEN2::MotionController
unfixed_cast	MotionController.cpp	/^	inline const int unfixed_cast(const long value)$/;"	f	namespace:__anon15
updateFrame	MotionController.cpp	/^void PLEN2::MotionController::updateFrame()$/;"	f	class:PLEN2::MotionController
updatingFinished	MotionController.cpp	/^bool PLEN2::MotionController::updatingFinished()$/;"	f	class:PLEN2::MotionController
willStop	MotionController.cpp	/^void PLEN2::MotionController::willStop()$/;"	f	class:PLEN2::MotionController
FRAMEBUFFER_LENGTH	MotionController.h	/^		FRAMEBUFFER_LENGTH = 2$/;"	e	enum:PLEN2::MotionController::__anon17
Motion	MotionController.h	/^	namespace Motion$/;"	n	namespace:PLEN2
MotionController	MotionController.h	/^class PLEN2::MotionController$/;"	c	class:PLEN2
PLEN2	MotionController.h	/^namespace PLEN2$/;"	n
PLEN2_MOTION_CONTROLLER_H	MotionController.h	11;"	d
m_buffer	MotionController.h	/^	Motion::Frame  m_buffer[FRAMEBUFFER_LENGTH];$/;"	m	class:PLEN2::MotionController
m_current_fixed_points	MotionController.h	/^	long m_current_fixed_points[JointController::SUM];$/;"	m	class:PLEN2::MotionController
m_diff_fixed_points	MotionController.h	/^	long m_diff_fixed_points[JointController::SUM];$/;"	m	class:PLEN2::MotionController
m_frame_current_ptr	MotionController.h	/^	Motion::Frame* m_frame_current_ptr;$/;"	m	class:PLEN2::MotionController
m_frame_next_ptr	MotionController.h	/^	Motion::Frame* m_frame_next_ptr;$/;"	m	class:PLEN2::MotionController
m_header	MotionController.h	/^	Motion::Header m_header;$/;"	m	class:PLEN2::MotionController
m_joint_ctrl_ptr	MotionController.h	/^	JointController* m_joint_ctrl_ptr;$/;"	m	class:PLEN2::MotionController
m_playing	MotionController.h	/^	bool          m_playing;$/;"	m	class:PLEN2::MotionController
m_transition_count	MotionController.h	/^	unsigned char m_transition_count;$/;"	m	class:PLEN2::MotionController
AbstractParser	Parser.cpp	/^AbstractParser::AbstractParser()$/;"	f	class:Utility::AbstractParser
CharGroupParser	Parser.cpp	/^CharGroupParser::CharGroupParser(const char* accept_chars)$/;"	f	class:Utility::CharGroupParser
HexStringParser	Parser.cpp	/^HexStringParser::HexStringParser()$/;"	f	class:Utility::HexStringParser
NilParser	Parser.cpp	/^NilParser::NilParser()$/;"	f	class:Utility::NilParser
StringGroupParser	Parser.cpp	/^StringGroupParser::StringGroupParser(const char* accept_strs[], const unsigned char size)$/;"	f	class:Utility::StringGroupParser
Utility	Parser.cpp	/^namespace Utility$/;"	n	file:
hexbytes2int	Parser.cpp	/^int hexbytes2int(const char* bytes, unsigned char size)$/;"	f	namespace:Utility
hexbytes2uint	Parser.cpp	/^unsigned int hexbytes2uint(const char* bytes, unsigned char size)$/;"	f	namespace:Utility
index	Parser.cpp	/^const char& AbstractParser::index()$/;"	f	class:Utility::AbstractParser
parse	Parser.cpp	/^bool CharGroupParser::parse(const char* input)$/;"	f	class:Utility::CharGroupParser
parse	Parser.cpp	/^bool HexStringParser::parse(const char* input)$/;"	f	class:Utility::HexStringParser
parse	Parser.cpp	/^bool NilParser::parse(const char* input)$/;"	f	class:Utility::NilParser
parse	Parser.cpp	/^bool StringGroupParser::parse(const char* input)$/;"	f	class:Utility::StringGroupParser
~AbstractParser	Parser.cpp	/^AbstractParser::~AbstractParser()$/;"	f	class:Utility::AbstractParser
~CharGroupParser	Parser.cpp	/^CharGroupParser::~CharGroupParser()$/;"	f	class:Utility::CharGroupParser
~HexStringParser	Parser.cpp	/^HexStringParser::~HexStringParser()$/;"	f	class:Utility::HexStringParser
~NilParser	Parser.cpp	/^NilParser::~NilParser()$/;"	f	class:Utility::NilParser
~StringGroupParser	Parser.cpp	/^StringGroupParser::~StringGroupParser()$/;"	f	class:Utility::StringGroupParser
AbstractParser	Parser.h	/^class Utility::AbstractParser$/;"	c	class:Utility
CharGroupParser	Parser.h	/^class Utility::CharGroupParser : public Utility::AbstractParser$/;"	c	class:Utility
HexStringParser	Parser.h	/^class Utility::HexStringParser : public Utility::AbstractParser$/;"	c	class:Utility
NilParser	Parser.h	/^class Utility::NilParser : public Utility::AbstractParser$/;"	c	class:Utility
StringGroupParser	Parser.h	/^class Utility::StringGroupParser : public Utility::AbstractParser$/;"	c	class:Utility
UTILITY_PARSER_H	Parser.h	11;"	d
Utility	Parser.h	/^namespace Utility$/;"	n
m_accept_chars	Parser.h	/^	const char* m_accept_chars;$/;"	m	class:Utility::CharGroupParser
m_accept_strs	Parser.h	/^	const char** m_accept_strs;$/;"	m	class:Utility::StringGroupParser
m_index	Parser.h	/^	char m_index;$/;"	m	class:Utility::AbstractParser
m_size	Parser.h	/^	const unsigned char m_size;$/;"	m	class:Utility::StringGroupParser
LED_OUT	Pin.h	/^		inline static const int LED_OUT()             { return 10; }$/;"	f	namespace:PLEN2::Pin
PCA9685_ENABLE	Pin.h	/^        inline static const int PCA9685_ENABLE()      { return 13; }$/;"	f	namespace:PLEN2::Pin
PLEN2	Pin.h	/^namespace PLEN2$/;"	n
PLEN2_PIN_H	Pin.h	11;"	d
PWM_OUT_12	Pin.h	/^		inline static const int PWM_OUT_12()          { return 12; }$/;"	f	namespace:PLEN2::Pin
PWM_OUT_14	Pin.h	/^		inline static const int PWM_OUT_14()          { return 14; }$/;"	f	namespace:PLEN2::Pin
Pin	Pin.h	/^	namespace Pin$/;"	n	namespace:PLEN2
Profiler	Profiler.cpp	/^Utility::Profiler::Profiler(const __FlashStringHelper* fsh_ptr)$/;"	f	class:Utility::Profiler
Shared	Profiler.cpp	/^	namespace Shared$/;"	n	namespace:__anon18	file:
m_nest	Profiler.cpp	/^		unsigned int m_nest = 0;$/;"	m	namespace:__anon18::Shared	file:
m_tabbing	Profiler.cpp	/^void Utility::Profiler::m_tabbing()$/;"	f	class:Utility::Profiler
~Profiler	Profiler.cpp	/^Utility::Profiler::~Profiler()$/;"	f	class:Utility::Profiler
Profiler	Profiler.h	/^class Utility::Profiler$/;"	c	class:Utility
UTILITY_PROFILER_H	Profiler.h	11;"	d
Utility	Profiler.h	/^namespace Utility$/;"	n
m_begin	Profiler.h	/^	unsigned long m_begin;$/;"	m	class:Utility::Profiler
m_end	Profiler.h	/^	unsigned long m_end;$/;"	m	class:Utility::Profiler
ARGS_STORE_LENGTH	Protocol.cpp	/^		const unsigned char* ARGS_STORE_LENGTH[] = {$/;"	m	namespace:__anon19::Shared	file:
CONTROLLER_ARGS_STORE_LENGTH	Protocol.cpp	/^		const unsigned char CONTROLLER_ARGS_STORE_LENGTH[] = {$/;"	m	namespace:__anon19::Shared	file:
CONTROLLER_SYMBOL	Protocol.cpp	/^		const char* CONTROLLER_SYMBOL[] = {$/;"	m	namespace:__anon19::Shared	file:
CONTROLLER_SYMBOL_LENGTH	Protocol.cpp	/^		enum { CONTROLLER_SYMBOL_LENGTH = sizeof(CONTROLLER_SYMBOL) \/ sizeof(CONTROLLER_SYMBOL[0]) };$/;"	e	enum:__anon19::Shared::__anon20	file:
GETTER_ARGS_STORE_LENGTH	Protocol.cpp	/^		const unsigned char GETTER_ARGS_STORE_LENGTH[] = {$/;"	m	namespace:__anon19::Shared	file:
GETTER_SYMBOL	Protocol.cpp	/^		const char* GETTER_SYMBOL[] = {$/;"	m	namespace:__anon19::Shared	file:
GETTER_SYMBOL_LENGTH	Protocol.cpp	/^		enum { GETTER_SYMBOL_LENGTH = sizeof(GETTER_SYMBOL) \/ sizeof(GETTER_SYMBOL[0]) };$/;"	e	enum:__anon19::Shared::__anon23	file:
INTERPRETER_ARGS_STORE_LENGTH	Protocol.cpp	/^		const unsigned char INTERPRETER_ARGS_STORE_LENGTH[] = {$/;"	m	namespace:__anon19::Shared	file:
INTERPRETER_SYMBOL	Protocol.cpp	/^		const char* INTERPRETER_SYMBOL[] = {$/;"	m	namespace:__anon19::Shared	file:
INTERPRETER_SYMBOL_LENGTH	Protocol.cpp	/^		enum { INTERPRETER_SYMBOL_LENGTH = sizeof(INTERPRETER_SYMBOL) \/ sizeof(INTERPRETER_SYMBOL[0]) };$/;"	e	enum:__anon19::Shared::__anon21	file:
Protocol	Protocol.cpp	/^PLEN2::Protocol::Protocol()$/;"	f	class:PLEN2::Protocol
SETTER_ARGS_STORE_LENGTH	Protocol.cpp	/^		const unsigned char SETTER_ARGS_STORE_LENGTH[] = {$/;"	m	namespace:__anon19::Shared	file:
SETTER_SYMBOL	Protocol.cpp	/^		const char* SETTER_SYMBOL[] = {$/;"	m	namespace:__anon19::Shared	file:
SETTER_SYMBOL_LENGTH	Protocol.cpp	/^		enum { SETTER_SYMBOL_LENGTH = sizeof(SETTER_SYMBOL) \/ sizeof(SETTER_SYMBOL[0]) };$/;"	e	enum:__anon19::Shared::__anon22	file:
Shared	Protocol.cpp	/^	namespace Shared$/;"	n	namespace:__anon19	file:
accept	Protocol.cpp	/^bool PLEN2::Protocol::accept()$/;"	f	class:PLEN2::Protocol
afterHook	Protocol.cpp	/^void PLEN2::Protocol::afterHook()$/;"	f	class:PLEN2::Protocol
args_parser	Protocol.cpp	/^		Utility::HexStringParser args_parser;$/;"	m	namespace:__anon19::Shared	file:
beforeHook	Protocol.cpp	/^void PLEN2::Protocol::beforeHook()$/;"	f	class:PLEN2::Protocol
command_parser	Protocol.cpp	/^		Utility::AbstractParser* command_parser[] = {$/;"	m	namespace:__anon19::Shared	file:
m_abort	Protocol.cpp	/^void PLEN2::Protocol::m_abort()$/;"	f	class:PLEN2::Protocol
nil_parser	Protocol.cpp	/^		Utility::NilParser nil_parser;$/;"	m	namespace:__anon19::Shared	file:
readByte	Protocol.cpp	/^void PLEN2::Protocol::readByte(char byte)$/;"	f	class:PLEN2::Protocol
transitState	Protocol.cpp	/^void PLEN2::Protocol::transitState()$/;"	f	class:PLEN2::Protocol
ARGUMENTS_INCOMING	Protocol.h	/^		ARGUMENTS_INCOMING,  \/\/!< Will receive string that might be ARGUMENTS.$/;"	e	enum:PLEN2::Protocol::__anon24
Buffer	Protocol.h	/^		Buffer()$/;"	f	class:PLEN2::Protocol::Buffer
Buffer	Protocol.h	/^	class Buffer$/;"	c	class:PLEN2::Protocol
COMMAND_INCOMING	Protocol.h	/^		COMMAND_INCOMING,    \/\/!< Will receive string that might be COMMAND.$/;"	e	enum:PLEN2::Protocol::__anon24
HEADER_INCOMING	Protocol.h	/^		HEADER_INCOMING = 0, \/\/!< Will receive string that might be HEADER. (Alias of state READY.)$/;"	e	enum:PLEN2::Protocol::__anon24
LENGTH	Protocol.h	/^			LENGTH = 128$/;"	e	enum:PLEN2::Protocol::Buffer::__anon25
PLEN2	Protocol.h	/^namespace PLEN2$/;"	n
PLEN2_PROTOCOL_H	Protocol.h	11;"	d
Protocol	Protocol.h	/^class PLEN2::Protocol$/;"	c	class:PLEN2
READY	Protocol.h	/^		READY,               \/\/!< Ready.$/;"	e	enum:PLEN2::Protocol::__anon24
STATE_EOE	Protocol.h	/^		STATE_EOE            \/\/!< Summation of the states.$/;"	e	enum:PLEN2::Protocol::__anon24
State	Protocol.h	/^	} State;$/;"	t	class:PLEN2::Protocol	typeref:enum:PLEN2::Protocol::__anon24
Utility	Protocol.h	/^namespace Utility$/;"	n
data	Protocol.h	/^		char          data[LENGTH]; \/\/!< Actual buffer instance.$/;"	m	class:PLEN2::Protocol::Buffer
m_buffer	Protocol.h	/^	Buffer m_buffer;$/;"	m	class:PLEN2::Protocol
m_installing	Protocol.h	/^	bool m_installing;$/;"	m	class:PLEN2::Protocol
m_parser	Protocol.h	/^	Utility::AbstractParser* m_parser[STATE_EOE];$/;"	m	class:PLEN2::Protocol
m_state	Protocol.h	/^	State m_state;$/;"	m	class:PLEN2::Protocol
m_store_length	Protocol.h	/^	unsigned char m_store_length;$/;"	m	class:PLEN2::Protocol
position	Protocol.h	/^		unsigned char position;     \/\/!< Current iterator's position.$/;"	m	class:PLEN2::Protocol::Buffer
~Protocol	Protocol.h	/^	virtual ~Protocol() {}$/;"	f	class:PLEN2::Protocol
EOE	Soul.cpp	/^		EOE$/;"	e	enum:__anon26::__anon27	file:
Shared	Soul.cpp	/^	namespace Shared$/;"	n	namespace:__anon26	file:
Soul	Soul.cpp	/^PLEN2::Soul::Soul(AccelerationGyroSensor& sensor, MotionController& motion_ctrl)$/;"	f	class:PLEN2::Soul
X_AXIS	Soul.cpp	/^		X_AXIS,$/;"	e	enum:__anon26::__anon27	file:
Y_AXIS	Soul.cpp	/^		Y_AXIS,$/;"	e	enum:__anon26::__anon27	file:
Z_AXIS	Soul.cpp	/^		Z_AXIS,$/;"	e	enum:__anon26::__anon27	file:
acc_backup	Soul.cpp	/^		long acc_backup[EOE] = { 0 };$/;"	m	namespace:__anon26::Shared	file:
action	Soul.cpp	/^void PLEN2::Soul::action()$/;"	f	class:PLEN2::Soul
log	Soul.cpp	/^void PLEN2::Soul::log()$/;"	f	class:PLEN2::Soul
m_preprocess	Soul.cpp	/^void PLEN2::Soul::m_preprocess()$/;"	f	class:PLEN2::Soul
userActionInputed	Soul.cpp	/^void PLEN2::Soul::userActionInputed()$/;"	f	class:PLEN2::Soul
BASE_INTERVAL_MSEC	Soul.h	/^	inline static const int BASE_INTERVAL_MSEC()     { return 15000; }$/;"	f	class:PLEN2::Soul
GETUP_WAIT_MSEC	Soul.h	/^	inline static const int GETUP_WAIT_MSEC()        { return 2000;  }$/;"	f	class:PLEN2::Soul
GRAVITY_AXIS_THRESHOLD	Soul.h	/^	inline static const int GRAVITY_AXIS_THRESHOLD() { return 13000; }$/;"	f	class:PLEN2::Soul
MOTIONS_SLOT_BEGIN	Soul.h	/^	inline static const int MOTIONS_SLOT_BEGIN()     { return 83;    }$/;"	f	class:PLEN2::Soul
MOTIONS_SLOT_END	Soul.h	/^	inline static const int MOTIONS_SLOT_END()       { return 88;    }$/;"	f	class:PLEN2::Soul
PLEN2	Soul.h	/^namespace PLEN2$/;"	n
PLEN2_SOUL_H	Soul.h	11;"	d
RANDOM_INTERVAL_MSEC	Soul.h	/^	inline static const int RANDOM_INTERVAL_MSEC()   { return 10000; }$/;"	f	class:PLEN2::Soul
SAMPLING_INTERVAL_MSEC	Soul.h	/^	inline static const int SAMPLING_INTERVAL_MSEC() { return 100;   }$/;"	f	class:PLEN2::Soul
SLOT_GETUP_FACE_DOWN	Soul.h	/^	inline static const int SLOT_GETUP_FACE_DOWN()   { return 89;    }$/;"	f	class:PLEN2::Soul
SLOT_GETUP_FACE_UP	Soul.h	/^	inline static const int SLOT_GETUP_FACE_UP()     { return 88;    }$/;"	f	class:PLEN2::Soul
Soul	Soul.h	/^class PLEN2::Soul$/;"	c	class:PLEN2
m_action_interval	Soul.h	/^	unsigned long m_action_interval;$/;"	m	class:PLEN2::Soul
m_before_user_action_msec	Soul.h	/^	unsigned long m_before_user_action_msec;$/;"	m	class:PLEN2::Soul
m_log_count	Soul.h	/^	unsigned char m_log_count;$/;"	m	class:PLEN2::Soul
m_lying	Soul.h	/^	bool m_lying;$/;"	m	class:PLEN2::Soul
m_motion_ctrl_ptr	Soul.h	/^	MotionController*       m_motion_ctrl_ptr;$/;"	m	class:PLEN2::Soul
m_next_sampling_msec	Soul.h	/^	unsigned long m_next_sampling_msec;$/;"	m	class:PLEN2::Soul
m_sensor_ptr	Soul.h	/^	AccelerationGyroSensor* m_sensor_ptr;$/;"	m	class:PLEN2::Soul
BROADCAST_PORT	System.cpp	27;"	d	file:
CONNECT_TIMEOUT_CNT	System.cpp	24;"	d	file:
PLEN2_SYSTEM_SERIAL	System.cpp	22;"	d	file:
StartAp	System.cpp	/^void PLEN2::System::StartAp()$/;"	f	class:PLEN2::System
System	System.cpp	/^PLEN2::System::System()$/;"	f	class:PLEN2::System
SystemSerial	System.cpp	/^Stream& PLEN2::System::SystemSerial()$/;"	f	class:PLEN2::System
debugSerial	System.cpp	/^Stream& PLEN2::System::debugSerial()$/;"	f	class:PLEN2::System
dump	System.cpp	/^void PLEN2::System::dump()$/;"	f	class:PLEN2::System
formatBytes	System.cpp	/^String formatBytes(size_t bytes)$/;"	f
fsUploadFile	System.cpp	/^File fsUploadFile;$/;"	v
getContentType	System.cpp	/^String getContentType(String filename)$/;"	f
handleClient	System.cpp	/^void PLEN2::System::handleClient()$/;"	f	class:PLEN2::System
handleFileCreate	System.cpp	/^void handleFileCreate(){$/;"	f
handleFileDelete	System.cpp	/^void handleFileDelete(){$/;"	f
handleFileList	System.cpp	/^void handleFileList() {$/;"	f
handleFileRead	System.cpp	/^bool handleFileRead(String path){$/;"	f
handleFileUpload	System.cpp	/^void handleFileUpload(){$/;"	f
httpUpdater	System.cpp	/^ESP8266HTTPUpdateServer httpUpdater;$/;"	v
inputSerial	System.cpp	/^Stream& PLEN2::System::inputSerial()$/;"	f	class:PLEN2::System
outputSerial	System.cpp	/^Stream& PLEN2::System::outputSerial()$/;"	f	class:PLEN2::System
robot_name	System.cpp	/^String robot_name = "JRobot-" + String(ESP.getChipId());$/;"	v
serverClient	System.cpp	/^WiFiClient serverClient;$/;"	v
servers_started	System.cpp	/^static bool servers_started = false;$/;"	v	file:
setup_smartconfig	System.cpp	/^void PLEN2::System::setup_smartconfig()$/;"	f	class:PLEN2::System
smart_config	System.cpp	/^void PLEN2::System::smart_config()$/;"	f	class:PLEN2::System
smartconfig_tricker	System.cpp	/^Ticker smartconfig_tricker;$/;"	v
tcp_available	System.cpp	/^bool PLEN2::System::tcp_available()$/;"	f	class:PLEN2::System
tcp_connected	System.cpp	/^bool PLEN2::System::tcp_connected()$/;"	f	class:PLEN2::System
tcp_read	System.cpp	/^char PLEN2::System::tcp_read()$/;"	f	class:PLEN2::System
udp	System.cpp	/^WiFiUDP udp;$/;"	v
update_cfg	System.cpp	/^volatile bool update_cfg;$/;"	v
wifi_psd	System.cpp	/^const char *wifi_psd = "12345678xyz";$/;"	v
CHECK_BATTERY	System.h	23;"	d
CLOCK_WISE	System.h	22;"	d
CODE_NAME	System.h	18;"	d
DEBUG	System.h	25;"	d
DEBUG_HARD	System.h	27;"	d
DEBUG_LESS	System.h	26;"	d
DEVICE_NAME	System.h	16;"	d
PLEN2	System.h	/^namespace PLEN2$/;"	n
PLEN2_SYSTEM_H	System.h	11;"	d
SERIAL_BAUDRATE	System.h	/^	inline static const long SERIAL_BAUDRATE() { return 115200L; }$/;"	f	class:PLEN2::System
System	System.h	/^class PLEN2::System$/;"	c	class:PLEN2
VERSION	System.h	20;"	d
ENSOUL_PLEN2	firmware.h	48;"	d
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
